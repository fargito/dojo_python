version: 2.1

orbs:
  skip: theodo/skip@0.0.4

executors:
  defaults_typescript:
    docker:
      - image: circleci/node:10.13.0

commands:
  yarn-install:
    parameters:
      workspace:
        type: string
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
      - attach_workspace:
          at: ~/dojo_python/<< parameters.workspace >>
      - restore_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
      - run:
          working_directory: << parameters.workspace >>
          name: Install front dependencies
          command: yarn
      - save_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
          paths:
            - << parameters.workspace >>/node_modules
      - persist_to_workspace:
          root: ~/dojo_python/<< parameters.workspace >>
          paths:
            - node_modules
            - .env

  yarn-tests:
    parameters:
      workspace:
        type: string
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
      - attach_workspace:
          at: ~/dojo_python/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Unit test with coverage
          command: yarn test:coverage
      - store_artifacts:
          path: << parameters.workspace >>/coverage
      - run:
          working_directory: << parameters.workspace >>
          name: Run Typescript checker
          command: yarn tsc

  yarn-linter:
    parameters:
      workspace:
        type: string
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: << parameters.workspace >>
      - attach_workspace:
          at: ~/dojo_python/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Run linter
          command: yarn lint
      - store_artifacts:
          path: << parameters.workspace >>/coverage

jobs:
  backend:
    working_directory: ~/dojo_python

    docker:
      - image: python:3.7
      - image: postgres:10

    environment:
      DATABASE_URL: postgres://postgres@localhost:5432/postgres
      DJANGO_SETTINGS_MODULE: dojo_python.settings.dev

    steps:
      - checkout

      - skip/skip_unchanged:
          paths: backend

      - restore_cache:
          keys:
            - backend-{% templatetag openvariable %} .Branch {% templatetag closevariable %}-{% templatetag openvariable %} checksum "backend/Pipfile.lock" {% templatetag closevariable %}
            - backend-{% templatetag openvariable %} .Branch {% templatetag closevariable %}
            - backend-master-{% templatetag openvariable %} checksum "backend/Pipfile.lock" {% templatetag closevariable %}
            - backend-master

      - run:
          name: Install pipenv
          command: pip install pipenv

      - run:
          name: Install python dependencies
          working_directory: backend
          command: pipenv install --dev --system

      - run:
          name: Check for security vulnerabilities
          working_directory: backend
          command: pipenv check

      - run:
          name: Check format
          working_directory: backend
          command: black --diff --check .

      - run:
          name: Check code style
          working_directory: backend
          command: flake8 .

      - run:
          name: Check imports order
          working_directory: backend
          command: isort --check-only --recursive --diff .

      - run:
          name: Check Django install
          working_directory: backend
          command: ./manage.py check

      - run:
          name: Check necessary migrations have been created
          working_directory: backend
          command: ./manage.py makemigrations --check --dry-run

      - run:
          name: Migrate database
          working_directory: backend
          command: ./manage.py migrate

      - run:
          name: Collect static files
          working_directory: backend
          command: ./manage.py collectstatic

      - run:
          name: Run tests
          working_directory: backend
          command: coverage run manage.py test

      - run:
          name: Check coverage
          working_directory: backend
          command: coverage report

      - save_cache:
          key: backend-{% templatetag openvariable %} .Branch {% templatetag closevariable %}-{% templatetag openvariable %} checksum "backend/Pipfile.lock" {% templatetag closevariable %}
          paths:
            - ~/.cache/pip

  yarn-install-front:
    executor: defaults_typescript
    working_directory: ~/dojo_python
    steps:
      - yarn-install:
          workspace: frontend

  react-tests:
    executor: defaults_typescript
    working_directory: ~/dojo_python
    environment:
      NODE_ENV: test
    steps:
      - yarn-tests:
          workspace: frontend

  react-bundlesize:
    executor: defaults_typescript
    working_directory: ~/dojo_python
    environment:
      NODE_ENV: prod
    steps:
      - checkout
      - skip/skip_unchanged:
          paths: frontend
      - attach_workspace:
          at: ~/dojo_python/frontend
      - run:
          working_directory: frontend
          name: Check bundle size
          command: yarn build && ./node_modules/.bin/bundlesize
      - store_artifacts:
          path: frontend/coverage

  react-linter:
    executor: defaults_typescript
    working_directory: ~/dojo_python
    environment:
      NODE_ENV: prod
    steps:
      - skip/skip_unchanged:
          paths: frontend
      - yarn-linter:
          workspace: frontend
      - run:
          working_directory: frontend
          name: Run css linter
          command: yarn lint-style
      - store_artifacts:
          path: frontend/coverage


workflows:
  version: 2
  stack:
    jobs:
      - backend
      - yarn-install-front
      - react-tests:
          requires:
            - yarn-install-front
      - react-bundlesize:
          requires:
            - yarn-install-front
      - react-linter:
          requires:
            - yarn-install-front
